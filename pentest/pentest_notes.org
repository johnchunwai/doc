* sniff packets from a machine you control
#+BEGIN_SRC 
# -k capture immediately, -i chooses the interface to capture, piping
# in nc (netcat) -l listening on port 7777
wireshark -k -i <(nc -l -p 7777)
# ssh into the remote machine
ssh <username>@<host>
# -w - write to stdout, -s 0 don't limit capture size
tcpdump -i <interface> -w - -s 0 "not port 7777" | nc <wireshark_host> 7777
# watch the thing in wireshark
#+END_SRC

* how to share files between linux machines or ssh into linux machine
1) set up and run sshd on one machine
   - make sure openssh is installed if not
   - vim /etc/ssh/sshd_config if needed
     - allow only Protocol 2
     - comment out the HostKeys that are not needed, I use only rsa
     - turn on StrictModes for more security
     - disable PermitRootLogin to make things more secure
     - optionally enable client cert authentication by uncommenting
       AutherizedKeysFile
     - disable PasswordAuthentication for security
   - generate host key if not already done
     - ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key
   - start or restart sshd:
     - ubuntu based# service ssh start/restart
     - other# /etc/init.d/sshd start/restart

2) set up client side auth keys
   - ssh-keygen -t rsa (this generates 2 keys id_rsa private key and
     id_rsa.pub public key)
   - copy the keys to ~/.ssh/ folder (or already in there)
   - if cygwin# chgrp -Rv User ~/.ssh
   - chmod 700 ~/.ssh
   - chmod 600 ~/.ssh/id_rsa
   - copy id_rsa.pub to sshd host machine's ~/.ssh/authorized_keys (~/
     is the user's home folder) file (or copy & paste the new .pub
     content and append to that file). The file path depends on the
     AutherizedKeysFile settings.
   - restart sshd (not sure if this is needed)

3) copy files between the 2 machines using scp
   - <user_name>@<host>: can be omitted for the local machine)
   - scp -i ~/.ssh/id_rsa <user_name>@<src_host>:<src_file> <user_name>@<dst_host>:<dst_file>
   - remember to shop sshd afterwards

4) to ssh into linux machine, same command
   - ssh -i ~/.ssh/id_rsa <user_name>@<host>

** Troubleshooting
- tail -f /var/log/auth.log

** A different approach
1) copy the file that you want to share into /var/www/ directory
2) make sure to chmod to 644
3) # service apache2 start
4) on the other machine use a browser to http://<hostname>/<file> to
   download the file
5) remember to stop apache2 afterwards

* Getting all endpoints
** PC
1) Run sysinternals procmon
2) Click toolbar buttons to only "show network activities"
3) launch the game
3) Drag the "target" from toolbar to the game
4) run the game till we're in fut
5) in procmon -> file -> save... make sure events displayed using
   current filter, format csv, and save to a file
6) open in excel and clean up, remove duplicates to reveal all the
   endpoints
7) if only ip's are shown and no hostname, use wireshark to find out

If http protocol issue, use double proxy, otherwise use single proxy

* double proxy (limit to a single endpoint)
Game client -> Fiddler -> Burp -> UTAS
1) user.ini points to utas.gt.fut.ea.com:8314, force non secure under
   [FUT] (and also [ONLINE] for 360)
1) Fiddler -> Tools -> Fiddler Options -> Connections, set listens on
   port to 8314
2) on Gateway tab, "Use System Proxy (recommended)
3) Fiddler -> Rules -> Customize Rules...
4) Add this:
#+BEGIN_SRC 
    static function OnBeforeRequest(oSession: Session) {
	if (oSession.host.toLowerCase() == "utas.gt.fut.ea.com:8314") { // FUT HOST:PORT
		oSession.host = "10.10.68.32:8314";  // BURP IP:PORT
	}
#+END_SRC
5) [@5]Fiddler: start capture
6) Modify c:\Windows\System32\drivers\etc\hosts:
	127.0.0.1       utas.gt.fut.ea.com
7) Start backtrack and Burp (Applications -> BackTrack ->
   Vulnerability Assessment -> Web Application Assessment -> Web
   Application Proxies -> burpsuite)
8) Proxy tab:
   1) Intercept tab -> off
   2) Options tab:
      1) Proxy Listeners [running, backtrack ip:8314, invisible,
         redirect: utas.gt.fut.ea.com:8314]
   3) History tab to watch
9) Start fifa game and connect to fut

* double proxy 2 (infinite endpoints)
Game client -> Charles web debugging proxy -> Burp UTAS
1) same user.ini change
2) update etc/hosts to point all interesting endpoints to localhost
2) charles -> proxy -> reverse proxies
3) add (double click to edit), local port=the endpoint port, remote
   host:port=burp host:port, don't rewrite redirects, check Preserve
   Host Header
4) do the burp set up for each endpoint

* single proxy
Game client -> Burp -> UTAS
1) No fiddler
2) user.ini points to burp host:port for FUT

* intercepting binary traffic (PC)
hookme (freeware)
1) File -> open/attach to fifaz.exe
2) Turn intercept on/off
3) Set rules to Match and replace without the need to intercept

360
===
Use xbwatson from C:\Program Files (x86)\Microsoft Xbox 360 SDK\bin\win32\ to get tty
Make sure virtualbox is using a bridged network

find all endpoints 01
---------------------
1) arpspoof -i <nic interface> -t <gateway> <game host>
2) arpspoof -i <nic interface> -t <game host> <gateway>
3) wireshark

find all endpoints 02
---------------------
1. create own dns server
---------------------
1) aptitude install bind9 (if not done already, to uninstall and purge all config files, aptitude purge bind9)
2) modify /etc/bind/named.conf.options, update and uncomment forwarders to the list of dns servers for EA. Each line separated by ";"
3) restart bind# service bind9 restart
4) monitor
4.1) turn on querylog# rndc querylog
4.2) tail -f /var/log/syslog
5) test# dig @localhost utas.gt.fut.ea.com

2. create gateway (NOT WORKING ON VM)
-------------------------------------
1) echo 1 > /proc/sys/net/ipv4/ip_forward  OR   sysctl -w net.ipv4.ip_forward=1
2) check: cat /proc/sys/net/ipv4/ip_forward    OR    sysctl net.ipv4.ip_forward

3. change console network settings
----------------------------------
1) default gateway=backtrack ip
2) dns=backtrack ip

4. capture
----------
1) tail -f /var/log/syslog > querylog (to check dns queries or use wireshark)
2) wireshark (add src port and dst port (unresolved) to the columns, promiscuous mode, name resolution on)

find all endpoints 03
---------------------
1. create another virtual nic and nat
---------------------------------------
1) create a virtual nic
1.1) if nic is eth0# ifconfig eth0:0 192.168.0.1 netmask 255.255.255.0 (eth0:<any number>, ip and netmask need to be diff from your lan subnet)
1.2) ifconfig to confirm
2) # echo 1 > /proc/sys/net/ipv4/ip_forward
3) # lsmod | grep nat
3.1) if not exist# modprobe iptable_nat
4) # iptables -t nat -A POSTROUTING -s 192.168.0.0/24 -j MASQUERADE	(-t <table>, -A (append), -s <source addr[/mask], -j <targetname>)
5) # iptables -t nat -L to confirm

2. have the game joins the virtual subnet
-----------------------------------------
1) console network settings: ip=<any thing in the v-subnet>, subnet_mask=<v-subnet mask>, gateway=<v-nic ip>
2) test# ping <console_vip>
3) happy wiresharking

find all endpoints 04
---------------------
1. use pptpd to set up vpn
--------------------------
1) # apt-get install pptpd (if not present)
2) # vim /etc/pptdp.conf
2.1) modify "localip", "remoteip" to your liking. better put things into a different subnet than yours, can be anything you make up.
2.2) turn on "debug" if you want more logs into /var/log/syslog
3) modify /etc/ppp/pptpd-options (the file pointed to by pptdp.conf settings
3.1) update "ms-dns" for further attacks or use the ones from /etc/resolv.conf
4) modify /etc/ppp/chap-secrets
4.1) <username>	pptpd	<passwd>	*
5) # /etc/init.d/pptpd restart

2. turn on ip_forward
---------------------
3. set up iptables
------------------
1) set up iptable_nat as shown in find all endpoints 03
2) # iptables -t nat -A POSTROUTING -s <subnet from pptdp.conf settings, eg. 192.168.10.0/24> -j MASQUERADE
3) # iptables -t nat -L to verify

4. ios, windows, or mac to connect to it, ipad as eg.
-----------------------------------------------------
1) system settings -> general -> VPN
2) add vpn configuration -> pptp tab
3) desc=<whatever>, server=<real ip of your backtrack, not the vpn ip>, account=<username>, password=<passwd>
4) turn on vpn

5. wireshark
------------
1) listen on the newly created ppp0 interface after the client connects or filter by vpn subnet ip


arp poisoning with ettercap
----------------------------
1) check if ip_forward is on: bt~# cat /proc/sys/net/ipv4/ip_forward
	0=disabled, 1=enabled
2) enable ip_forward: bt~# echo 1 > /proc/sys/net/ipv4/ip_forward
3) update ettercap config:
3.1) bt~# vim /usr/local/etc/etter.conf
3.2) Change:
		# if you use iptables:
		#redir_command_on = "iptables -t nat -A PREROUTING -i %iface -p tcp --dport %port -j REDIRECT --to-port %rport"
		#redir_command_off = "iptables -t nat -D PREROUTING -i %iface -p tcp --dport %port -j REDIRECT --to-port %rport"
	 To (uncomment):
		# if you use iptables:
		redir_command_on = "iptables -t nat -A PREROUTING -i %iface -p tcp --dport %port -j REDIRECT --to-port %rport"
		redir_command_off = "iptables -t nat -D PREROUTING -i %iface -p tcp --dport %port -j REDIRECT --to-port %rport"
4)
	 
Reroute traffic by setting up a dns server
------------------------------------------
1. create own dns server
------------------------
1) follow the find all endpoints thing above
2) modify dns files, samples in //depot/tools/security/dns_settings/sample_redirects/...

setting up mallory
------------------
https://bitbucket.org/IntrepidusGroup/mallory/wiki/Installation
