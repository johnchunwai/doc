* bash for windows
** Fix background color
*** emacs
#+BEGIN_SRC 
add to ~/.emacs.d/init.el:
(custom-set-variables '(frame-background-mode 'dark))
#+END_SRC
*** vim
#+BEGIN_SRC 
In bash:
echo "set background=dark" >> .vimrc
#+END_SRC
*** terminal
#+BEGIN_SRC 
add to ~/.bashrc:
LS_COLORS='rs=0:di=1;35:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lz=01;31:*.xz=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.axv=01;35:*.anx=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.axa=00;36:*.oga=00;36:*.spx=00;36:*.xspf=00;36:';
export LS_COLORS

PS1='\[\e[37;1m\]\u@\[\e[35m\]\W\[\e[0m\]\$ '
#+END_SRC

* bashrc tweaks
** share history among terminals
#+BEGIN_SRC 
# append to the history file, don't overwrite it
shopt -s histappend
PROMPT_COMMAND="${PROMPT_COMMAND:+$PROMPT_COMMAND$'\n'}history -a; history -c; history -r"

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000
#+END_SRC

** start ssh agent at start up
#+BEGIN_SRC 
SSH_ENV="$HOME/.ssh/environment"

function start_agent {
    echo "Initialising new SSH agent..."
    /usr/bin/ssh-agent | sed 's/^echo/#echo/' > "${SSH_ENV}"
    echo succeeded
    chmod 600 "${SSH_ENV}"
    . "${SSH_ENV}" > /dev/null
    /usr/bin/ssh-add;
}

# Source SSH settings, if applicable

if [ -f "${SSH_ENV}" ]; then
    . "${SSH_ENV}" > /dev/null
    #ps ${SSH_AGENT_PID} doesn't work under cywgin
    ps -ef | grep ${SSH_AGENT_PID} | grep ssh-agent$ > /dev/null || {
        start_agent;
    }
else
    start_agent;
fi

# After the above, just for example:
# ssh-add ~/.ssh/id_dsa_github
#+END_SRC

* initialization
#+BEGIN_SRC 
sudo apt-get update
sudo apt-get upgrade
sudo apt-get dkms build-essential module-assistant
sudo m-a prepare
# if using virtualbox, install guest additions
sudo apt-get install apt-file
sudo apt-get install checkinstall
#+END_SRC

* tweaks
** system settings -> keyboard -> app shortcuts
*** add /usr/bin/xfce4-terminal.wrapper for Ctl-Alt-T
** system settings -> window manager -> advanced
*** check snap "to other windows"
** edit ~/.config/user-dirs.dirs
*** change all folders to lowercase names
*** rename 'y/A-Z/a-z' <each of the files in ls ~/>

* package management
** apt-get
*** commands
#+BEGIN_SRC 
sudo apt-get install <package>
apt-cache search <package> --names-only
sudo apt-get purge <package>
sudo apt-get build-dep <package>
apt-cache policy <package> (show version)
sudo apt-get dist-upgrade
apt-file search <filename> // look for pkg that contains that file
#+END_SRC
** dpkg
*** commands
#+BEGIN_SRC 
sudo dpkg -i /path/to/deb/file (-r for remove)
sudo apt-get install -f (for missing dependencies)
apt-cache policy/search <package> will show the dpkg package
dpkg -l | grep <package> to find installed packages
#+END_SRC

* install from source
#+BEGIN_SRC 
cd downloads
wget <url>
tar -xzvf <tar.gz file>
cd <src dir>
./configure
# fix all dependencies
make
# the following replaces make install and create a deb pkg for uninstall
sudo checkinstall
# use dpkg -r package_name to uninstall
#+END_SRC

* for dev on ubuntu
#+BEGIN_SRC 
# install from src gnu global (apt-get too outdated)
# cmake 3.3 or above from src
sudo apt-get install clang-3.6
sudo apt-get install libclang-3.6-dev
# emacs 24.4 or above from src
sudo apt-get install git
sudo apt-get install mesa-utils
sudo apt-get install nux-tools
sudo apt-get install mesa-common-dev
# in handmade/, gtags
#+END_SRC

* choose default compiler
#+BEGIN_SRC 
sudo update-alternatives --config cc
sudo update-alternatives --config c++
#+END_SRC
If you've installed your clang manually and put it in a non standard
place it may not show up with --config. For example if it's in
/usr/bin/clang++-3.6, then first install a new alternative:
#+BEGIN_SRC
sudo update-alternatives --install /usr/bin/c++ c++ /usr/bin/clang++-3.6 30
#+END_SRC

* oh-my-zsh
#+BEGIN_SRC 
sudo apt-get install curl
sudo apt-get install zsh
sudo apt-get install git
curl -L http://install.ohmyz.sh > install.sh
sh install.sh
#+END_SRC

* X11 forwarding
this can be used to render GUI and graphics on windows host to improve
3d performance for example from linux guest on virtualbox
- on linux (server side but X11 client)
#+BEGIN_SRC 
# in /etc/ssh/sshd_config
# make sure sshd is installed or use package manager to get it
X11Forwarding yes

# make sure xauth is installed; if not, apt-get it

# if vbox is using NAT for network
# add port forwarding for port 22 so that host can hit it
#+END_SRC
- on windows (client side X11 server)
#+BEGIN_SRC 
# use mobaXterm
# make sure ssh settings have X11 forwarding enabled
# display settings have hardware acceleration turned on
# find VM IP from network settings
ssh -X -v <user>@<vm ip>
#+END_SRC

* misc
** check ubuntu version, 32/64bit
#+BEGIN_SRC 
lsb_release -a
uname -m
#+END_SRC
** check cpu 32/64bit
#+BEGIN_SRC 
lscpu
#+END_SRC
** check kernel version
#+BEGIN_SRC 
uname -r
#+END_SRC
** check 3d cap
#+BEGIN_SRC 
/usr/lib/nux/unity_support_test -p (with nux-tools)
glxinfo | grep OpenGL
glxgears
glmark2
#+END_SRC
** check disk usage
#+BEGIN_SRC 
df -h
#+END_SRC
** running sudo with user path
#+BEGIN_SRC 
sudo -E env "PATH=$PATH" <command> <args>
#+END_SRC

* CentOS
** set up centos on vbox
#+BEGIN_SRC 
create machine in vbox for:
- redhat 64bit
- (optional) may have to disable 3d acceleration or it breaks guest additions
- NAT

mount centos iso and install:
- choose timezone
- development workstation type
- turn on nic (default is off)
#+END_SRC
** post install
#+BEGIN_SRC 
# add keyboard shortcut for terminal
# find keyboard shortcut in system setting
# add a shortcut for gnome-terminal

# launch a terminal and edit->prefernce to select dark theme

# create user if not done yet
# as root
adduser <username>
passwd <pwd>
usermod -aG wheel <username>

visudo
# search for wheel and uncomment the line that allows wheel for full access
# for convenience, you could uncomment the no password line too, less secure

# test sudo
su - <username>
sudo whoami

# logout and re-login as the new user

# prepare for vbox guest additions
# the following makes reinstall of guest additions not necessary upon os update
# copy the link to the latest epel from https://fedoraproject.org/wiki/EPEL
sudo yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
# -y assume yes to prompts
sudo yum -y install gcc kernel-devel kernel-headers dkms make bzip2 perl
## Current running kernel on Fedora 28/27/26/25/24/23/22, CentOS 7/6 and Red Hat (RHEL) 7/6 ##
KERN_DIR=/usr/src/kernels/`uname -r`/build
export KERN_DIR

# now, install guest additions
# if it complains about missing some kernel-devel packages or so, install those first and re-run

# optional
reboot

#+END_SRC

** install other software to match environment boxes
#+BEGIN_SRC 
# make ssh works
# in vbox machine network settings, add port forwarding rules:
- name: ssh
- host/guest port: 22
# test
# from host:
ssh <vbox adapter ip> (mine is 192.168.56.1)

# install oracle jdk (change jdk version to match environment
curl -L -b "oraclelicense=a" -O http://download.oracle.com/otn-pub/java/jdk/10.0.2+13/19aef61b38124481863b1413dce1855f/jdk-10.0.2_linux-x64_bin.rpm
sudo yum localinstall jdk-10.0.2_linux-x64_bin.rpm

# if not already done, select the default version of java
sudo alternatives --config java
sudo alternatives --config javac

# set JAVA_HOME and add path
# add to .bash_profile:
export JAVA_HOME=/usr/java/jdk-10.0.2
export JRE_HOME=$JAVA_HOME/jre

PATH=$PATH:$HOME/bin:$JAVA_HOME/bin

export PATH

#+END_SRC
